---
- hosts: localhost
  vars:
    result: 0
  vars_files:
    - network_configs.yml

  tasks:
  - name: Define the network
    virt_net:
      command: define
      name: '{{ network[item].network_name }}'
      xml: '{{ lookup("template", "templates/bridge.xml.j2") }}'
      state: present
    with_items: "{{ network }}"
    become: yes

  - name: Create the network
    virt_net:
      command: create
      name: '{{ network[item].network_name }}'
      autostart: true
    with_items: "{{ network }}"
    become: yes

  - name: Assign IP addresses to non bridge devices
    command: "ip addr add {{ network[item].ip_address }}/{{ network[item].subnet_mask_num }} dev {{ network[item].bridge_name }}"
    when: 
      - network[item].bridge_type != "bridge"
      - (ansible_facts[network[item].bridge_name]['ipv4'] is not defined) or (ansible_facts[network[item].bridge_name]['ipv4']['address'] != network[item].ip_address)
    with_items: "{{ network }}"
    become: yes

  - name: Create DNS server for DHCP bridges
    command: "dnsmasq --interface={{ network[item].bridge_name }} --bind-interfaces --dhcp-range={{ network[item].dhcp_start_range }},{{ network[item].dhcp_end_range }},{{ network[item].dhcp_lease_time }}"
    when: 
      - '"dhcp" in network[item].bridge_type'
    ignore_errors: true
    with_items: "{{ network }}"
    become: yes

  - name: Adding NAT functionality to NAT bridges
    iptables:
      table: nat
      chain: POSTROUTING
      action: append
      state: present
      source: "{{ network[item].subnet_address }}/{{ network[item].subnet_mask_num }}"
      jump: MASQUERADE
    when:
      - '"nat" in network[item].bridge_type'
    with_items: "{{ network }}"
    become: yes

  - name: Start the network
    virt_net:
      command: start
      name: '{{ network[item].network_name }}'
    with_items: "{{ network }}"
    become: yes
    
  - name: Show networks
    virt_net:
      command: list_nets
    register: out
  - debug: var=out
